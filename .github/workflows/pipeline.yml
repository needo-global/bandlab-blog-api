name: Build & Deploy

on: [push, workflow_dispatch]

env:
  DOCKER_IMAGE: bandlab-posts-api:latest
  AWS_ECR_REPO_NAME: bandlab-posts-api
  DOCKER_ARTIFACT: bandlab-posts-api-${{ github.sha }}.tar
  AWS_REGION: ap-southeast-2

jobs:
  build:
    name: Build & Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: [ap-southeast-2]
    steps:
      - uses: actions/checkout@v4

      - name: Setup dotnet
        uses: actions/setup-dotnet@master
        with:
          dotnet-version: 8.0.x

      - name: Configure AWS credentials
        if: startsWith(github.ref, 'refs/heads/renovate/') == false
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Build, Test & Package Lambda artifacts
        env:
          AWS_REGION: ${{ matrix.region }}
        run: |
          set -euo pipefail

          chmod +x ./build.sh
          ./build.sh
        working-directory: scripts

      - name: Build Docker Image for API Hosting
        run: |
          docker build \
            --tag ${{ env.DOCKER_IMAGE }} .
          docker save --output ${{ env.DOCKER_ARTIFACT }} ${{ env.DOCKER_IMAGE }}

      - name: Login to AWS ECR
        if: startsWith(github.ref, 'refs/heads/renovate/') == false
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if not exists
        run: |
          aws ecr create-repository --repository-name ${{ env.AWS_ECR_REPO_NAME }} || true

      - name: Tag and push docker image
        if: startsWith(github.ref, 'refs/heads/renovate/') == false
        env:
          DOCKER_IMAGE_URL: ${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_REPO_NAME }}:${{ github.sha }}
        run: |
          docker load --input ${{ env.DOCKER_ARTIFACT }}
          docker tag ${{ env.DOCKER_IMAGE }} ${{ env.DOCKER_IMAGE_URL }}
          docker push ${{ env.DOCKER_IMAGE_URL }
